
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\160\000\002\002\005\000\002\002\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\002\000\002\011\007\000\002\011\011\000" +
    "\002\011\012\000\002\003\006\000\002\003\004\000\002" +
    "\027\012\000\002\027\011\000\002\027\011\000\002\027" +
    "\010\000\002\032\004\000\002\032\003\000\002\032\003" +
    "\000\002\015\006\000\002\015\010\000\002\031\004\000" +
    "\002\031\003\000\002\017\010\000\002\017\007\000\002" +
    "\024\006\000\002\006\004\000\002\006\003\000\002\020" +
    "\005\000\002\020\007\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\010\000\002\013\010\000\002\013\010\000\002" +
    "\013\010\000\002\013\006\000\002\013\006\000\002\013" +
    "\003\000\002\010\003\000\002\010\005\000\002\005\004" +
    "\000\002\005\006\000\002\005\005\000\002\005\005\000" +
    "\002\005\011\000\002\005\013\000\002\005\005\000\002" +
    "\005\004\000\002\005\004\000\002\005\005\000\002\005" +
    "\006\000\002\005\003\000\002\005\003\000\002\005\004" +
    "\000\002\026\004\000\002\026\005\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\005\000\002\007\005\000\002\007" +
    "\004\000\002\007\005\000\002\007\003\000\002\007\005" +
    "\000\002\007\004\000\002\007\005\000\002\007\005\000" +
    "\002\007\004\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\004\000\002\022\004\000\002\022\004" +
    "\000\002\022\003\000\002\012\011\000\002\012\010\000" +
    "\002\023\003\000\002\023\005\000\002\023\004\000\002" +
    "\023\006\000\002\025\003\000\002\025\002\000\002\021" +
    "\005\000\002\021\007\000\002\030\003\000\002\030\004" +
    "\000\002\016\005\000\002\016\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\352\000\014\004\ufffb\024\015\025\013\026\005\067" +
    "\004\001\002\000\004\052\254\001\002\000\022\014\023" +
    "\015\030\016\021\017\026\020\031\022\024\023\025\067" +
    "\022\001\002\000\016\002\ufffb\004\ufffb\024\015\025\013" +
    "\026\005\067\004\001\002\000\016\002\ufffb\004\ufffb\024" +
    "\015\025\013\026\005\067\004\001\002\000\004\002\347" +
    "\001\002\000\004\004\325\001\002\000\016\002\ufffb\004" +
    "\ufffb\024\015\025\013\026\005\067\004\001\002\000\004" +
    "\067\074\001\002\000\016\002\ufffb\004\ufffb\024\015\025" +
    "\013\026\005\067\004\001\002\000\004\067\055\001\002" +
    "\000\006\052\020\053\017\001\002\000\016\002\ufff6\004" +
    "\ufff6\024\ufff6\025\ufff6\026\ufff6\067\ufff6\001\002\000\022" +
    "\014\023\015\030\016\021\017\026\020\031\022\024\023" +
    "\025\067\022\001\002\000\036\014\uffe3\015\uffe3\016\uffe3" +
    "\017\uffe3\020\uffe3\022\uffe3\023\uffe3\042\uffe3\047\uffe3\053" +
    "\uffe3\067\uffe3\070\uffe3\072\uffe3\077\uffe3\001\002\000\036" +
    "\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\022\uffd8\023" +
    "\uffd8\042\uffd8\047\uffd8\053\uffd8\067\uffd8\070\uffd8\072\uffd8" +
    "\077\uffd8\001\002\000\036\014\uffe0\015\uffe0\016\uffe0\017" +
    "\uffe0\020\uffe0\022\uffe0\023\uffe0\042\uffe0\047\uffe0\053\uffe0" +
    "\067\uffe0\070\uffe0\072\uffe0\077\uffe0\001\002\000\004\040" +
    "\040\001\002\000\004\040\033\001\002\000\036\014\uffe1" +
    "\015\uffe1\016\uffe1\017\uffe1\020\uffe1\022\uffe1\023\uffe1\042" +
    "\uffe1\047\uffe1\053\uffe1\067\uffe1\070\uffe1\072\uffe1\077\uffe1" +
    "\001\002\000\004\053\032\001\002\000\036\014\uffdf\015" +
    "\uffdf\016\uffdf\017\uffdf\020\uffdf\022\uffdf\023\uffdf\042\uffdf" +
    "\047\uffdf\053\uffdf\067\uffdf\070\uffdf\072\uffdf\077\uffdf\001" +
    "\002\000\036\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2" +
    "\022\uffe2\023\uffe2\042\uffe2\047\uffe2\053\uffe2\067\uffe2\070" +
    "\uffe2\072\uffe2\077\uffe2\001\002\000\016\002\ufff7\004\ufff7" +
    "\024\ufff7\025\ufff7\026\ufff7\067\ufff7\001\002\000\024\014" +
    "\023\015\030\016\021\017\026\020\031\021\034\022\024" +
    "\023\025\067\022\001\002\000\004\042\037\001\002\000" +
    "\004\042\036\001\002\000\036\014\uffda\015\uffda\016\uffda" +
    "\017\uffda\020\uffda\022\uffda\023\uffda\042\uffda\047\uffda\053" +
    "\uffda\067\uffda\070\uffda\072\uffda\077\uffda\001\002\000\036" +
    "\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\022\uffd9\023" +
    "\uffd9\042\uffd9\047\uffd9\053\uffd9\067\uffd9\070\uffd9\072\uffd9" +
    "\077\uffd9\001\002\000\024\014\023\015\030\016\021\017" +
    "\026\020\031\021\041\022\024\023\025\067\022\001\002" +
    "\000\004\070\050\001\002\000\004\070\043\001\002\000" +
    "\024\014\023\015\030\016\021\017\026\020\031\021\044" +
    "\022\024\023\025\067\022\001\002\000\004\042\047\001" +
    "\002\000\004\042\046\001\002\000\036\014\uffde\015\uffde" +
    "\016\uffde\017\uffde\020\uffde\022\uffde\023\uffde\042\uffde\047" +
    "\uffde\053\uffde\067\uffde\070\uffde\072\uffde\077\uffde\001\002" +
    "\000\036\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\022" +
    "\uffdc\023\uffdc\042\uffdc\047\uffdc\053\uffdc\067\uffdc\070\uffdc" +
    "\072\uffdc\077\uffdc\001\002\000\024\014\023\015\030\016" +
    "\021\017\026\020\031\021\051\022\024\023\025\067\022" +
    "\001\002\000\004\042\054\001\002\000\004\042\053\001" +
    "\002\000\036\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd" +
    "\022\uffdd\023\uffdd\042\uffdd\047\uffdd\053\uffdd\067\uffdd\070" +
    "\uffdd\072\uffdd\077\uffdd\001\002\000\036\014\uffdb\015\uffdb" +
    "\016\uffdb\017\uffdb\020\uffdb\022\uffdb\023\uffdb\042\uffdb\047" +
    "\uffdb\053\uffdb\067\uffdb\070\uffdb\072\uffdb\077\uffdb\001\002" +
    "\000\004\046\056\001\002\000\006\047\061\067\060\001" +
    "\002\000\006\047\066\070\065\001\002\000\004\052\063" +
    "\001\002\000\004\053\062\001\002\000\100\002\uffe9\003" +
    "\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9" +
    "\012\uffe9\013\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030" +
    "\uffe9\031\uffe9\033\uffe9\034\uffe9\035\uffe9\046\uffe9\047\uffe9" +
    "\050\uffe9\053\uffe9\055\uffe9\062\uffe9\067\uffe9\071\uffe9\074" +
    "\uffe9\075\uffe9\076\uffe9\100\uffe9\001\002\000\022\014\023" +
    "\015\030\016\021\017\026\020\031\022\024\023\025\067" +
    "\022\001\002\000\010\047\uffe5\070\uffe5\072\uffe5\001\002" +
    "\000\004\067\070\001\002\000\004\053\067\001\002\000" +
    "\100\002\uffea\003\uffea\004\uffea\005\uffea\006\uffea\007\uffea" +
    "\010\uffea\011\uffea\012\uffea\013\uffea\024\uffea\025\uffea\026" +
    "\uffea\027\uffea\030\uffea\031\uffea\033\uffea\034\uffea\035\uffea" +
    "\046\uffea\047\uffea\050\uffea\053\uffea\055\uffea\062\uffea\067" +
    "\uffea\071\uffea\074\uffea\075\uffea\076\uffea\100\uffea\001\002" +
    "\000\004\052\071\001\002\000\022\014\023\015\030\016" +
    "\021\017\026\020\031\022\024\023\025\067\022\001\002" +
    "\000\010\047\uffe4\070\uffe4\072\uffe4\001\002\000\006\002" +
    "\ufffd\004\ufffd\001\002\000\004\071\075\001\002\000\006" +
    "\067\060\072\077\001\002\000\006\070\065\072\316\001" +
    "\002\000\004\046\100\001\002\000\064\003\120\005\123" +
    "\006\134\007\142\010\102\011\104\012\115\013\124\024" +
    "\015\026\137\027\130\033\131\034\143\035\116\046\111" +
    "\047\122\050\127\053\uff98\055\105\062\106\067\126\071" +
    "\136\074\110\076\125\100\132\001\002\000\046\037\uffc5" +
    "\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\053" +
    "\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5" +
    "\063\uffc5\064\uffc5\065\uffc5\077\313\001\002\000\060\037" +
    "\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2" +
    "\047\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056" +
    "\uffc2\057\uffc2\060\uffc2\061\uffc2\063\uffc2\064\uffc2\065\uffc2" +
    "\070\uffc2\072\uffc2\100\uffc2\001\002\000\004\047\uffef\001" +
    "\002\000\060\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6" +
    "\044\uffa6\045\uffa6\047\uffa6\051\uffa6\052\uffa6\053\uffa6\054" +
    "\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6\063\uffa6" +
    "\064\uffa6\065\uffa6\070\uffa6\072\uffa6\100\uffa6\001\002\000" +
    "\010\011\312\012\311\013\310\001\002\000\036\005\123" +
    "\006\134\007\142\010\102\011\104\012\115\013\124\046" +
    "\111\050\127\055\105\062\106\067\144\071\136\100\132" +
    "\001\002\000\004\047\306\001\002\000\064\003\120\005" +
    "\123\006\134\007\142\010\102\011\104\012\115\013\124" +
    "\024\015\026\137\027\130\033\131\034\143\035\116\046" +
    "\111\050\127\053\uff98\055\105\062\106\067\144\071\136" +
    "\074\110\075\303\076\125\100\132\001\002\000\040\005" +
    "\123\006\134\007\142\010\102\011\104\012\115\013\124" +
    "\046\111\047\273\050\127\055\105\062\106\067\144\071" +
    "\136\100\132\001\002\000\004\053\272\001\002\000\046" +
    "\037\166\040\152\041\147\042\160\043\156\044\165\045" +
    "\167\051\uff99\053\uff99\054\154\055\164\056\162\057\163" +
    "\060\170\061\150\063\151\064\155\065\157\001\002\000" +
    "\072\003\120\005\123\006\134\007\142\010\102\011\104" +
    "\012\115\013\124\024\015\026\137\027\130\030\uffe6\031" +
    "\uffe6\033\131\034\143\035\116\046\111\047\uffe6\050\127" +
    "\053\uff98\055\105\062\106\067\144\071\136\074\110\075" +
    "\uffe6\076\125\100\132\001\002\000\060\037\uffa4\040\uffa4" +
    "\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\047\uffa4\051" +
    "\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4" +
    "\060\uffa4\061\uffa4\063\uffa4\064\uffa4\065\uffa4\070\uffa4\072" +
    "\uffa4\100\uffa4\001\002\000\040\005\123\006\134\007\142" +
    "\010\102\011\104\012\115\013\124\046\111\050\127\053" +
    "\266\055\105\062\106\067\144\071\136\100\132\001\002" +
    "\000\072\003\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011" +
    "\uffca\012\uffca\013\uffca\024\uffca\026\uffca\027\uffca\030\uffca" +
    "\031\uffca\033\uffca\034\uffca\035\uffca\046\uffca\047\uffca\050" +
    "\uffca\053\uffca\055\uffca\062\uffca\067\uffca\071\uffca\074\uffca" +
    "\075\uffca\076\uffca\100\uffca\001\002\000\004\053\265\001" +
    "\002\000\072\003\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9" +
    "\011\uffc9\012\uffc9\013\uffc9\024\uffc9\026\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\033\uffc9\034\uffc9\035\uffc9\046\uffc9\047\uffc9" +
    "\050\uffc9\053\uffc9\055\uffc9\062\uffc9\067\uffc9\071\uffc9\074" +
    "\uffc9\075\uffc9\076\uffc9\100\uffc9\001\002\000\006\052\ufff2" +
    "\053\ufff2\001\002\000\060\037\uffa0\040\uffa0\041\uffa0\042" +
    "\uffa0\043\uffa0\044\uffa0\045\uffa0\047\uffa0\051\uffa0\052\uffa0" +
    "\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0\061" +
    "\uffa0\063\uffa0\064\uffa0\065\uffa0\070\uffa0\072\uffa0\100\uffa0" +
    "\001\002\000\060\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043" +
    "\uffa5\044\uffa5\045\uffa5\047\uffa5\051\uffa5\052\uffa5\053\uffa5" +
    "\054\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5\063" +
    "\uffa5\064\uffa5\065\uffa5\070\uffa5\072\uffa5\100\uffa5\001\002" +
    "\000\006\011\263\053\262\001\002\000\056\037\uff9d\040" +
    "\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\050\174" +
    "\052\254\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\060" +
    "\uff9d\061\uff9d\063\uff9d\064\uff9d\065\uff9d\066\172\073\175" +
    "\077\uff9d\001\002\000\040\005\123\006\134\007\142\010" +
    "\102\011\104\012\115\013\124\046\111\050\127\051\251" +
    "\055\105\062\106\067\144\071\136\100\132\001\002\000" +
    "\004\071\240\001\002\000\004\067\201\001\002\000\036" +
    "\005\123\006\134\007\142\010\102\011\104\012\115\013" +
    "\124\046\111\050\127\055\105\062\106\067\144\071\136" +
    "\100\132\001\002\000\060\037\uffc4\040\uffc4\041\uffc4\042" +
    "\uffc4\043\uffc4\044\uffc4\045\uffc4\047\uffc4\051\uffc4\052\uffc4" +
    "\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061" +
    "\uffc4\063\uffc4\064\uffc4\065\uffc4\070\uffc4\072\uffc4\100\uffc4" +
    "\001\002\000\060\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043" +
    "\uffc1\044\uffc1\045\uffc1\047\uffc1\051\uffc1\052\uffc1\053\uffc1" +
    "\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\063" +
    "\uffc1\064\uffc1\065\uffc1\070\uffc1\072\uffc1\100\uffc1\001\002" +
    "\000\060\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044" +
    "\uffbc\045\uffbc\047\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc" +
    "\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\063\uffbc\064" +
    "\uffbc\065\uffbc\070\uffbc\072\uffbc\100\uffbc\001\002\000\036" +
    "\005\123\006\134\007\142\010\102\011\104\012\115\013" +
    "\124\046\111\050\127\055\105\062\106\067\144\071\136" +
    "\100\132\001\002\000\022\014\023\015\030\016\021\017" +
    "\026\020\031\022\024\023\025\067\022\001\002\000\064" +
    "\003\120\005\123\006\134\007\142\010\102\011\104\012" +
    "\115\013\124\024\015\026\137\027\130\033\131\034\143" +
    "\035\116\046\111\047\ufff0\050\127\053\uff98\055\105\062" +
    "\106\067\126\071\136\074\110\076\125\100\132\001\002" +
    "\000\064\003\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011" +
    "\uffeb\012\uffeb\013\uffeb\024\uffeb\026\uffeb\027\uffeb\033\uffeb" +
    "\034\uffeb\035\uffeb\046\uffeb\047\uffeb\050\uffeb\053\uffeb\055" +
    "\uffeb\062\uffeb\067\uffeb\071\uffeb\074\uffeb\076\uffeb\100\uffeb" +
    "\001\002\000\060\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043" +
    "\uffc3\044\uffc3\045\uffc3\047\uffc3\051\uffc3\052\uffc3\053\uffc3" +
    "\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\063" +
    "\uffc3\064\uffc3\065\uffc3\070\uffc3\072\uffc3\100\uffc3\001\002" +
    "\000\036\005\123\006\134\007\142\010\102\011\104\012" +
    "\115\013\124\046\111\050\127\055\105\062\106\067\144" +
    "\071\136\100\132\001\002\000\070\037\uff9d\040\uff9d\041" +
    "\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\047\uff9d\050\174" +
    "\051\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057" +
    "\uff9d\060\uff9d\061\uff9d\063\uff9d\064\uff9d\065\uff9d\066\172" +
    "\070\uff9d\072\uff9d\073\175\077\uff9d\100\uff9d\001\002\000" +
    "\044\037\166\040\152\041\147\042\160\043\156\044\165" +
    "\045\167\053\153\054\154\055\164\056\162\057\163\060" +
    "\170\061\150\063\151\064\155\065\157\001\002\000\060" +
    "\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045" +
    "\uffc5\047\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5" +
    "\056\uffc5\057\uffc5\060\uffc5\061\uffc5\063\uffc5\064\uffc5\065" +
    "\uffc5\070\uffc5\072\uffc5\100\uffc5\001\002\000\036\005\uffaf" +
    "\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\046" +
    "\uffaf\050\uffaf\055\uffaf\062\uffaf\067\uffaf\071\uffaf\100\uffaf" +
    "\001\002\000\036\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011" +
    "\uffb3\012\uffb3\013\uffb3\046\uffb3\050\uffb3\055\uffb3\062\uffb3" +
    "\067\uffb3\071\uffb3\100\uffb3\001\002\000\036\005\uffac\006" +
    "\uffac\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac\046\uffac" +
    "\050\uffac\055\uffac\062\uffac\067\uffac\071\uffac\100\uffac\001" +
    "\002\000\036\005\uffae\006\uffae\007\uffae\010\uffae\011\uffae" +
    "\012\uffae\013\uffae\046\uffae\050\uffae\055\uffae\062\uffae\067" +
    "\uffae\071\uffae\100\uffae\001\002\000\072\003\uffd3\005\uffd3" +
    "\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\024" +
    "\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\033\uffd3\034\uffd3" +
    "\035\uffd3\046\uffd3\047\uffd3\050\uffd3\053\uffd3\055\uffd3\062" +
    "\uffd3\067\uffd3\071\uffd3\074\uffd3\075\uffd3\076\uffd3\100\uffd3" +
    "\001\002\000\036\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011" +
    "\uffb6\012\uffb6\013\uffb6\046\uffb6\050\uffb6\055\uffb6\062\uffb6" +
    "\067\uffb6\071\uffb6\100\uffb6\001\002\000\036\005\uffab\006" +
    "\uffab\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab\046\uffab" +
    "\050\uffab\055\uffab\062\uffab\067\uffab\071\uffab\100\uffab\001" +
    "\002\000\036\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9" +
    "\012\uffa9\013\uffa9\046\uffa9\050\uffa9\055\uffa9\062\uffa9\067" +
    "\uffa9\071\uffa9\100\uffa9\001\002\000\036\005\uffaa\006\uffaa" +
    "\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\046\uffaa\050" +
    "\uffaa\055\uffaa\062\uffaa\067\uffaa\071\uffaa\100\uffaa\001\002" +
    "\000\036\005\uffad\006\uffad\007\uffad\010\uffad\011\uffad\012" +
    "\uffad\013\uffad\046\uffad\050\uffad\055\uffad\062\uffad\067\uffad" +
    "\071\uffad\100\uffad\001\002\000\036\005\123\006\134\007" +
    "\142\010\102\011\104\012\115\013\124\046\111\050\127" +
    "\055\105\062\106\067\144\071\136\100\132\001\002\000" +
    "\036\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8" +
    "\013\uffa8\046\uffa8\050\uffa8\055\uffa8\062\uffa8\067\uffa8\071" +
    "\uffa8\100\uffa8\001\002\000\036\005\uffb4\006\uffb4\007\uffb4" +
    "\010\uffb4\011\uffb4\012\uffb4\013\uffb4\046\uffb4\050\uffb4\055" +
    "\uffb4\062\uffb4\067\uffb4\071\uffb4\100\uffb4\001\002\000\036" +
    "\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013" +
    "\uffb5\046\uffb5\050\uffb5\055\uffb5\062\uffb5\067\uffb5\071\uffb5" +
    "\100\uffb5\001\002\000\036\005\uffb1\006\uffb1\007\uffb1\010" +
    "\uffb1\011\uffb1\012\uffb1\013\uffb1\046\uffb1\050\uffb1\055\uffb1" +
    "\062\uffb1\067\uffb1\071\uffb1\100\uffb1\001\002\000\036\005" +
    "\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0" +
    "\046\uffb0\050\uffb0\055\uffb0\062\uffb0\067\uffb0\071\uffb0\100" +
    "\uffb0\001\002\000\036\005\uffa7\006\uffa7\007\uffa7\010\uffa7" +
    "\011\uffa7\012\uffa7\013\uffa7\046\uffa7\050\uffa7\055\uffa7\062" +
    "\uffa7\067\uffa7\071\uffa7\100\uffa7\001\002\000\036\005\uffb2" +
    "\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\046" +
    "\uffb2\050\uffb2\055\uffb2\062\uffb2\067\uffb2\071\uffb2\100\uffb2" +
    "\001\002\000\060\037\166\040\152\041\147\042\160\043" +
    "\156\044\165\045\167\047\uffbf\051\uffbf\052\uffbf\053\uffbf" +
    "\054\154\055\164\056\162\057\163\060\170\061\150\063" +
    "\151\064\155\065\157\070\uffbf\072\uffbf\100\uffbf\001\002" +
    "\000\004\067\201\001\002\000\066\037\uff95\040\uff95\041" +
    "\uff95\042\uff95\043\uff95\044\uff95\045\uff95\047\uff95\050\174" +
    "\051\uff95\052\uff95\053\uff95\054\uff95\055\uff95\056\uff95\057" +
    "\uff95\060\uff95\061\uff95\063\uff95\064\uff95\065\uff95\070\uff95" +
    "\072\uff95\073\uff95\077\uff95\100\uff95\001\002\000\040\005" +
    "\123\006\134\007\142\010\102\011\104\012\115\013\124" +
    "\046\111\050\127\052\uff98\055\105\062\106\067\144\071" +
    "\136\100\132\001\002\000\006\036\204\067\201\001\002" +
    "\000\064\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044" +
    "\uff9b\045\uff9b\047\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b" +
    "\055\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b\063\uff9b\064" +
    "\uff9b\065\uff9b\070\uff9b\072\uff9b\073\177\077\uff9b\100\uff9b" +
    "\001\002\000\004\067\201\001\002\000\062\037\uff9a\040" +
    "\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\047\uff9a" +
    "\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\057" +
    "\uff9a\060\uff9a\061\uff9a\063\uff9a\064\uff9a\065\uff9a\070\uff9a" +
    "\072\uff9a\077\uff9a\100\uff9a\001\002\000\066\037\uff9d\040" +
    "\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\047\uff9d" +
    "\050\174\051\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d\056" +
    "\uff9d\057\uff9d\060\uff9d\061\uff9d\063\uff9d\064\uff9d\065\uff9d" +
    "\070\uff9d\072\uff9d\073\202\077\uff9d\100\uff9d\001\002\000" +
    "\004\067\201\001\002\000\062\037\uff9c\040\uff9c\041\uff9c" +
    "\042\uff9c\043\uff9c\044\uff9c\045\uff9c\047\uff9c\051\uff9c\052" +
    "\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c" +
    "\061\uff9c\063\uff9c\064\uff9c\065\uff9c\070\uff9c\072\uff9c\077" +
    "\uff9c\100\uff9c\001\002\000\060\037\uffc0\040\uffc0\041\uffc0" +
    "\042\uffc0\043\uffc0\044\uffc0\045\uffc0\047\uffc0\051\uffc0\052" +
    "\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0" +
    "\061\uffc0\063\uffc0\064\uffc0\065\uffc0\070\uffc0\072\uffc0\100" +
    "\uffc0\001\002\000\046\037\166\040\152\041\147\042\160" +
    "\043\156\044\165\045\167\051\212\052\uff99\054\154\055" +
    "\164\056\162\057\163\060\170\061\150\063\151\064\155" +
    "\065\157\001\002\000\004\052\207\001\002\000\040\005" +
    "\123\006\134\007\142\010\102\011\104\012\115\013\124" +
    "\046\111\050\127\051\uff98\055\105\062\106\067\144\071" +
    "\136\100\132\001\002\000\004\051\211\001\002\000\066" +
    "\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045" +
    "\uff96\047\uff96\050\uff96\051\uff96\052\uff96\053\uff96\054\uff96" +
    "\055\uff96\056\uff96\057\uff96\060\uff96\061\uff96\063\uff96\064" +
    "\uff96\065\uff96\070\uff96\072\uff96\073\uff96\077\uff96\100\uff96" +
    "\001\002\000\066\037\uff97\040\uff97\041\uff97\042\uff97\043" +
    "\uff97\044\uff97\045\uff97\047\uff97\050\uff97\051\uff97\052\uff97" +
    "\053\uff97\054\uff97\055\uff97\056\uff97\057\uff97\060\uff97\061" +
    "\uff97\063\uff97\064\uff97\065\uff97\070\uff97\072\uff97\073\uff97" +
    "\077\uff97\100\uff97\001\002\000\064\037\uff94\040\uff94\041" +
    "\uff94\042\uff94\043\uff94\044\uff94\045\uff94\047\uff94\051\uff94" +
    "\052\uff94\053\uff94\054\uff94\055\uff94\056\uff94\057\uff94\060" +
    "\uff94\061\uff94\063\uff94\064\uff94\065\uff94\070\uff94\072\uff94" +
    "\073\uff94\077\uff94\100\uff94\001\002\000\060\037\uffb9\040" +
    "\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\047\uffb9" +
    "\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057" +
    "\uffb9\060\uffb9\061\uffb9\063\uffb9\064\uffb9\065\uffb9\070\uffb9" +
    "\072\uffb9\100\uffb9\001\002\000\064\003\uffec\005\uffec\006" +
    "\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\024\uffec" +
    "\026\uffec\027\uffec\033\uffec\034\uffec\035\uffec\046\uffec\047" +
    "\uffec\050\uffec\053\uffec\055\uffec\062\uffec\067\uffec\071\uffec" +
    "\074\uffec\076\uffec\100\uffec\001\002\000\004\047\ufff1\001" +
    "\002\000\022\014\023\015\030\016\021\017\026\020\031" +
    "\022\024\023\025\067\022\001\002\000\004\053\221\001" +
    "\002\000\072\003\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb" +
    "\011\uffcb\012\uffcb\013\uffcb\024\uffcb\026\uffcb\027\uffcb\030" +
    "\uffcb\031\uffcb\033\uffcb\034\uffcb\035\uffcb\046\uffcb\047\uffcb" +
    "\050\uffcb\053\uffcb\055\uffcb\062\uffcb\067\uffcb\071\uffcb\074" +
    "\uffcb\075\uffcb\076\uffcb\100\uffcb\001\002\000\044\037\166" +
    "\040\152\041\147\042\160\043\156\044\165\045\167\054" +
    "\154\055\164\056\162\057\163\060\170\061\150\063\151" +
    "\064\155\065\157\072\223\001\002\000\060\037\uffbd\040" +
    "\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\047\uffbd" +
    "\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057" +
    "\uffbd\060\uffbd\061\uffbd\063\uffbd\064\uffbd\065\uffbd\070\uffbd" +
    "\072\uffbd\100\uffbd\001\002\000\044\037\166\040\152\041" +
    "\147\042\160\043\156\044\165\045\167\054\154\055\164" +
    "\056\162\057\163\060\170\061\150\063\151\064\155\065" +
    "\157\100\225\001\002\000\004\067\226\001\002\000\004" +
    "\071\227\001\002\000\040\005\123\006\134\007\142\010" +
    "\102\011\104\012\115\013\124\046\111\050\127\055\105" +
    "\062\106\067\144\071\136\072\231\100\132\001\002\000" +
    "\052\037\166\040\152\041\147\042\160\043\156\044\165" +
    "\045\167\051\uffd7\053\uffd7\054\154\055\164\056\162\057" +
    "\163\060\170\061\150\063\151\064\155\065\157\070\uffd7" +
    "\072\uffd7\001\002\000\060\037\uff9e\040\uff9e\041\uff9e\042" +
    "\uff9e\043\uff9e\044\uff9e\045\uff9e\047\uff9e\051\uff9e\052\uff9e" +
    "\053\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e\060\uff9e\061" +
    "\uff9e\063\uff9e\064\uff9e\065\uff9e\070\uff9e\072\uff9e\100\uff9e" +
    "\001\002\000\006\070\233\072\234\001\002\000\036\005" +
    "\123\006\134\007\142\010\102\011\104\012\115\013\124" +
    "\046\111\050\127\055\105\062\106\067\144\071\136\100" +
    "\132\001\002\000\060\037\uff9f\040\uff9f\041\uff9f\042\uff9f" +
    "\043\uff9f\044\uff9f\045\uff9f\047\uff9f\051\uff9f\052\uff9f\053" +
    "\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f" +
    "\063\uff9f\064\uff9f\065\uff9f\070\uff9f\072\uff9f\100\uff9f\001" +
    "\002\000\052\037\166\040\152\041\147\042\160\043\156" +
    "\044\165\045\167\051\uffd6\053\uffd6\054\154\055\164\056" +
    "\162\057\163\060\170\061\150\063\151\064\155\065\157" +
    "\070\uffd6\072\uffd6\001\002\000\004\053\237\001\002\000" +
    "\072\003\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2" +
    "\012\uffd2\013\uffd2\024\uffd2\026\uffd2\027\uffd2\030\uffd2\031" +
    "\uffd2\033\uffd2\034\uffd2\035\uffd2\046\uffd2\047\uffd2\050\uffd2" +
    "\053\uffd2\055\uffd2\062\uffd2\067\uffd2\071\uffd2\074\uffd2\075" +
    "\uffd2\076\uffd2\100\uffd2\001\002\000\036\005\123\006\134" +
    "\007\142\010\102\011\104\012\115\013\124\046\111\050" +
    "\127\055\105\062\106\067\144\071\136\100\132\001\002" +
    "\000\044\037\166\040\152\041\147\042\160\043\156\044" +
    "\165\045\167\054\154\055\164\056\162\057\163\060\170" +
    "\061\150\063\151\064\155\065\157\072\242\001\002\000" +
    "\004\032\243\001\002\000\062\003\120\005\123\006\134" +
    "\007\142\010\102\011\104\012\115\013\124\024\015\026" +
    "\137\027\130\033\131\034\143\035\116\046\111\050\127" +
    "\053\uff98\055\105\062\106\067\144\071\136\074\110\076" +
    "\125\100\132\001\002\000\006\030\245\031\246\001\002" +
    "\000\072\003\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011" +
    "\uffd1\012\uffd1\013\uffd1\024\uffd1\026\uffd1\027\uffd1\030\uffd1" +
    "\031\uffd1\033\uffd1\034\uffd1\035\uffd1\046\uffd1\047\uffd1\050" +
    "\uffd1\053\uffd1\055\uffd1\062\uffd1\067\uffd1\071\uffd1\074\uffd1" +
    "\075\uffd1\076\uffd1\100\uffd1\001\002\000\062\003\120\005" +
    "\123\006\134\007\142\010\102\011\104\012\115\013\124" +
    "\024\015\026\137\027\130\033\131\034\143\035\116\046" +
    "\111\050\127\053\uff98\055\105\062\106\067\144\071\136" +
    "\074\110\076\125\100\132\001\002\000\004\030\250\001" +
    "\002\000\072\003\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0" +
    "\011\uffd0\012\uffd0\013\uffd0\024\uffd0\026\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\033\uffd0\034\uffd0\035\uffd0\046\uffd0\047\uffd0" +
    "\050\uffd0\053\uffd0\055\uffd0\062\uffd0\067\uffd0\071\uffd0\074" +
    "\uffd0\075\uffd0\076\uffd0\100\uffd0\001\002\000\060\037\uffba" +
    "\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\047" +
    "\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba" +
    "\057\uffba\060\uffba\061\uffba\063\uffba\064\uffba\065\uffba\070" +
    "\uffba\072\uffba\100\uffba\001\002\000\006\051\253\070\233" +
    "\001\002\000\060\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043" +
    "\uffbb\044\uffbb\045\uffbb\047\uffbb\051\uffbb\052\uffbb\053\uffbb" +
    "\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\063" +
    "\uffbb\064\uffbb\065\uffbb\070\uffbb\072\uffbb\100\uffbb\001\002" +
    "\000\022\014\023\015\030\016\021\017\026\020\031\022" +
    "\024\023\025\067\022\001\002\000\006\053\256\077\257" +
    "\001\002\000\072\002\uffee\003\uffee\004\uffee\005\uffee\006" +
    "\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee\024\uffee" +
    "\025\uffee\026\uffee\027\uffee\033\uffee\034\uffee\035\uffee\046" +
    "\uffee\047\uffee\050\uffee\053\uffee\055\uffee\062\uffee\067\uffee" +
    "\071\uffee\074\uffee\076\uffee\100\uffee\001\002\000\036\005" +
    "\123\006\134\007\142\010\102\011\104\012\115\013\124" +
    "\046\111\050\127\055\105\062\106\067\144\071\136\100" +
    "\132\001\002\000\006\053\261\070\233\001\002\000\072" +
    "\002\uffed\003\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010" +
    "\uffed\011\uffed\012\uffed\013\uffed\024\uffed\025\uffed\026\uffed" +
    "\027\uffed\033\uffed\034\uffed\035\uffed\046\uffed\047\uffed\050" +
    "\uffed\053\uffed\055\uffed\062\uffed\067\uffed\071\uffed\074\uffed" +
    "\076\uffed\100\uffed\001\002\000\072\003\uffc7\005\uffc7\006" +
    "\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\024\uffc7" +
    "\026\uffc7\027\uffc7\030\uffc7\031\uffc7\033\uffc7\034\uffc7\035" +
    "\uffc7\046\uffc7\047\uffc7\050\uffc7\053\uffc7\055\uffc7\062\uffc7" +
    "\067\uffc7\071\uffc7\074\uffc7\075\uffc7\076\uffc7\100\uffc7\001" +
    "\002\000\004\053\264\001\002\000\072\003\uffc6\005\uffc6" +
    "\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\024" +
    "\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\033\uffc6\034\uffc6" +
    "\035\uffc6\046\uffc6\047\uffc6\050\uffc6\053\uffc6\055\uffc6\062" +
    "\uffc6\067\uffc6\071\uffc6\074\uffc6\075\uffc6\076\uffc6\100\uffc6" +
    "\001\002\000\072\003\uffc8\005\uffc8\006\uffc8\007\uffc8\010" +
    "\uffc8\011\uffc8\012\uffc8\013\uffc8\024\uffc8\026\uffc8\027\uffc8" +
    "\030\uffc8\031\uffc8\033\uffc8\034\uffc8\035\uffc8\046\uffc8\047" +
    "\uffc8\050\uffc8\053\uffc8\055\uffc8\062\uffc8\067\uffc8\071\uffc8" +
    "\074\uffc8\075\uffc8\076\uffc8\100\uffc8\001\002\000\072\003" +
    "\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd" +
    "\013\uffcd\024\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\033" +
    "\uffcd\034\uffcd\035\uffcd\046\uffcd\047\uffcd\050\uffcd\053\uffcd" +
    "\055\uffcd\062\uffcd\067\uffcd\071\uffcd\074\uffcd\075\uffcd\076" +
    "\uffcd\100\uffcd\001\002\000\044\037\166\040\152\041\147" +
    "\042\160\043\156\044\165\045\167\053\270\054\154\055" +
    "\164\056\162\057\163\060\170\061\150\063\151\064\155" +
    "\065\157\001\002\000\072\003\uffcc\005\uffcc\006\uffcc\007" +
    "\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\024\uffcc\026\uffcc" +
    "\027\uffcc\030\uffcc\031\uffcc\033\uffcc\034\uffcc\035\uffcc\046" +
    "\uffcc\047\uffcc\050\uffcc\053\uffcc\055\uffcc\062\uffcc\067\uffcc" +
    "\071\uffcc\074\uffcc\075\uffcc\076\uffcc\100\uffcc\001\002\000" +
    "\012\030\uffe7\031\uffe7\047\uffe7\075\uffe7\001\002\000\072" +
    "\003\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012" +
    "\uffd5\013\uffd5\024\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5" +
    "\033\uffd5\034\uffd5\035\uffd5\046\uffd5\047\uffd5\050\uffd5\053" +
    "\uffd5\055\uffd5\062\uffd5\067\uffd5\071\uffd5\074\uffd5\075\uffd5" +
    "\076\uffd5\100\uffd5\001\002\000\060\037\uffb7\040\uffb7\041" +
    "\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\047\uffb7\051\uffb7" +
    "\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060" +
    "\uffb7\061\uffb7\063\uffb7\064\uffb7\065\uffb7\070\uffb7\072\uffb7" +
    "\100\uffb7\001\002\000\044\037\166\040\152\041\147\042" +
    "\160\043\156\044\165\045\167\052\277\054\154\055\164" +
    "\056\162\057\163\060\170\061\150\063\151\064\155\065" +
    "\157\001\002\000\004\047\276\001\002\000\060\037\uffb8" +
    "\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\047" +
    "\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8" +
    "\057\uffb8\060\uffb8\061\uffb8\063\uffb8\064\uffb8\065\uffb8\070" +
    "\uffb8\072\uffb8\100\uffb8\001\002\000\036\005\123\006\134" +
    "\007\142\010\102\011\104\012\115\013\124\046\111\050" +
    "\127\055\105\062\106\067\144\071\136\100\132\001\002" +
    "\000\046\037\166\040\152\041\147\042\160\043\156\044" +
    "\165\045\167\047\uff93\054\154\055\164\056\162\057\163" +
    "\060\170\061\150\063\151\064\155\065\157\070\301\001" +
    "\002\000\036\005\123\006\134\007\142\010\102\011\104" +
    "\012\115\013\124\046\111\050\127\055\105\062\106\067" +
    "\144\071\136\100\132\001\002\000\004\047\uff92\001\002" +
    "\000\072\003\uffce\005\uffce\006\uffce\007\uffce\010\uffce\011" +
    "\uffce\012\uffce\013\uffce\024\uffce\026\uffce\027\uffce\030\uffce" +
    "\031\uffce\033\uffce\034\uffce\035\uffce\046\uffce\047\uffce\050" +
    "\uffce\053\uffce\055\uffce\062\uffce\067\uffce\071\uffce\074\uffce" +
    "\075\uffce\076\uffce\100\uffce\001\002\000\004\075\305\001" +
    "\002\000\072\003\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf" +
    "\011\uffcf\012\uffcf\013\uffcf\024\uffcf\026\uffcf\027\uffcf\030" +
    "\uffcf\031\uffcf\033\uffcf\034\uffcf\035\uffcf\046\uffcf\047\uffcf" +
    "\050\uffcf\053\uffcf\055\uffcf\062\uffcf\067\uffcf\071\uffcf\074" +
    "\uffcf\075\uffcf\076\uffcf\100\uffcf\001\002\000\006\052\ufff4" +
    "\053\ufff4\001\002\000\060\037\166\040\152\041\147\042" +
    "\160\043\uffbe\044\165\045\167\047\uffbe\051\uffbe\052\uffbe" +
    "\053\uffbe\054\154\055\164\056\162\057\163\060\170\061" +
    "\150\063\uffbe\064\uffbe\065\157\070\uffbe\072\uffbe\100\uffbe" +
    "\001\002\000\060\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043" +
    "\uffa2\044\uffa2\045\uffa2\047\uffa2\051\uffa2\052\uffa2\053\uffa2" +
    "\054\uffa2\055\uffa2\056\uffa2\057\uffa2\060\uffa2\061\uffa2\063" +
    "\uffa2\064\uffa2\065\uffa2\070\uffa2\072\uffa2\100\uffa2\001\002" +
    "\000\060\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044" +
    "\uffa1\045\uffa1\047\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1" +
    "\055\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1\063\uffa1\064" +
    "\uffa1\065\uffa1\070\uffa1\072\uffa1\100\uffa1\001\002\000\060" +
    "\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045" +
    "\uffa3\047\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3" +
    "\056\uffa3\057\uffa3\060\uffa3\061\uffa3\063\uffa3\064\uffa3\065" +
    "\uffa3\070\uffa3\072\uffa3\100\uffa3\001\002\000\036\005\123" +
    "\006\134\007\142\010\102\011\104\012\115\013\124\046" +
    "\111\050\127\055\105\062\106\067\144\071\136\100\132" +
    "\001\002\000\044\037\166\040\152\041\147\042\160\043" +
    "\156\044\165\045\167\053\315\054\154\055\164\056\162" +
    "\057\163\060\170\061\150\063\151\064\155\065\157\001" +
    "\002\000\072\003\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4" +
    "\011\uffd4\012\uffd4\013\uffd4\024\uffd4\026\uffd4\027\uffd4\030" +
    "\uffd4\031\uffd4\033\uffd4\034\uffd4\035\uffd4\046\uffd4\047\uffd4" +
    "\050\uffd4\053\uffd4\055\uffd4\062\uffd4\067\uffd4\071\uffd4\074" +
    "\uffd4\075\uffd4\076\uffd4\100\uffd4\001\002\000\004\046\317" +
    "\001\002\000\064\003\120\005\123\006\134\007\142\010" +
    "\102\011\104\012\115\013\124\024\015\026\137\027\130" +
    "\033\131\034\143\035\116\046\111\047\321\050\127\053" +
    "\uff98\055\105\062\106\067\126\071\136\074\110\076\125" +
    "\100\132\001\002\000\004\047\322\001\002\000\006\052" +
    "\ufff3\053\ufff3\001\002\000\006\052\ufff5\053\ufff5\001\002" +
    "\000\006\002\ufffc\004\ufffc\001\002\000\014\002\ufffb\024" +
    "\015\025\013\026\005\067\004\001\002\000\006\046\326" +
    "\071\327\001\002\000\062\003\120\005\123\006\134\007" +
    "\142\010\102\011\104\012\115\013\124\024\015\026\137" +
    "\027\130\033\131\034\143\035\116\046\111\050\127\053" +
    "\uff98\055\105\062\106\067\126\071\136\074\110\076\125" +
    "\100\132\001\002\000\006\067\060\072\331\001\002\000" +
    "\006\070\065\072\336\001\002\000\004\046\332\001\002" +
    "\000\062\003\120\005\123\006\134\007\142\010\102\011" +
    "\104\012\115\013\124\024\015\026\137\027\130\033\131" +
    "\034\143\035\116\046\111\050\127\053\uff98\055\105\062" +
    "\106\067\126\071\136\074\110\076\125\100\132\001\002" +
    "\000\004\047\334\001\002\000\004\053\335\001\002\000" +
    "\014\002\ufff9\024\ufff9\025\ufff9\026\ufff9\067\ufff9\001\002" +
    "\000\004\046\337\001\002\000\062\003\120\005\123\006" +
    "\134\007\142\010\102\011\104\012\115\013\124\024\015" +
    "\026\137\027\130\033\131\034\143\035\116\046\111\050" +
    "\127\053\uff98\055\105\062\106\067\126\071\136\074\110" +
    "\076\125\100\132\001\002\000\004\047\341\001\002\000" +
    "\004\053\342\001\002\000\014\002\ufff8\024\ufff8\025\ufff8" +
    "\026\ufff8\067\ufff8\001\002\000\004\047\344\001\002\000" +
    "\004\053\345\001\002\000\014\002\ufffa\024\ufffa\025\ufffa" +
    "\026\ufffa\067\ufffa\001\002\000\004\002\001\001\002\000" +
    "\004\002\000\001\002\000\006\002\uffff\004\uffff\001\002" +
    "\000\006\002\ufffe\004\ufffe\001\002\000\004\067\353\001" +
    "\002\000\004\053\354\001\002\000\016\002\uffe8\004\uffe8" +
    "\024\uffe8\025\uffe8\026\uffe8\067\uffe8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\352\000\020\002\007\003\006\004\010\015\005\017" +
    "\013\024\011\027\015\001\001\000\002\001\001\000\004" +
    "\013\351\001\001\000\016\003\006\004\350\015\005\017" +
    "\013\024\011\027\015\001\001\000\016\003\006\004\347" +
    "\015\005\017\013\024\011\027\015\001\001\000\002\001" +
    "\001\000\004\011\323\001\001\000\016\003\006\004\322" +
    "\015\005\017\013\024\011\027\015\001\001\000\002\001" +
    "\001\000\016\003\006\004\072\015\005\017\013\024\011" +
    "\027\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\005\113\006\102\007\112" +
    "\012\134\015\140\017\120\022\132\023\100\025\111\026" +
    "\116\031\137\032\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\306\012\134\022\132\023\145\001\001" +
    "\000\002\001\001\000\024\005\113\006\303\007\112\012" +
    "\134\017\120\022\132\023\100\025\111\026\116\001\001" +
    "\000\014\007\273\012\134\016\274\022\132\023\145\001" +
    "\001\000\002\001\001\000\004\014\160\001\001\000\024" +
    "\005\113\006\270\007\112\012\134\017\120\022\132\023" +
    "\100\025\111\026\116\001\001\000\002\001\001\000\012" +
    "\007\266\012\134\022\132\023\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\172\030\175\001\001\000\014\007\227\010\251" +
    "\012\134\022\132\023\145\001\001\000\002\001\001\000" +
    "\004\023\235\001\001\000\012\007\223\012\134\022\132" +
    "\023\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\007\221\012\134\022\132\023\145" +
    "\001\001\000\004\013\216\001\001\000\026\005\113\006" +
    "\215\007\112\012\134\015\214\017\120\022\132\023\100" +
    "\025\111\026\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\144\012\134\022\132\023\145\001\001" +
    "\000\006\021\172\030\175\001\001\000\004\014\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\170\012\134\022" +
    "\132\023\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\160\001\001" +
    "\000\004\023\213\001\001\000\006\021\172\030\212\001" +
    "\001\000\014\007\204\012\134\022\132\023\145\025\205" +
    "\001\001\000\004\023\202\001\001\000\002\001\001\000" +
    "\004\023\177\001\001\000\002\001\001\000\006\021\172" +
    "\030\175\001\001\000\004\023\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\160\001\001\000\002" +
    "\001\001\000\014\007\112\012\134\022\132\023\145\025" +
    "\207\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\217\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\160\001\001\000" +
    "\002\001\001\000\004\014\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\227\010\231\012\134\022" +
    "\132\023\145\001\001\000\004\014\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\234\012\134\022" +
    "\132\023\145\001\001\000\002\001\001\000\004\014\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\240\012\134\022\132\023\145\001\001\000\004\014\160" +
    "\001\001\000\002\001\001\000\024\005\113\006\243\007" +
    "\112\012\134\017\120\022\132\023\100\025\111\026\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\005" +
    "\113\006\246\007\112\012\134\017\120\022\132\023\100" +
    "\025\111\026\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\254\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\007\227\010\257\012\134\022\132\023\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\277\012\134\022\132\023\145\001\001" +
    "\000\004\014\160\001\001\000\014\007\273\012\134\016" +
    "\301\022\132\023\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\313\012\134\022" +
    "\132\023\145\001\001\000\004\014\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\005\113\006\102\007" +
    "\112\012\134\015\140\017\120\022\132\023\100\025\111" +
    "\026\116\031\137\032\317\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\006\004\345\015\005\017\013\024\011\027\015\001" +
    "\001\000\002\001\001\000\032\005\113\006\102\007\112" +
    "\012\134\015\140\017\120\022\132\023\100\025\111\026" +
    "\116\031\137\032\342\001\001\000\004\020\327\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\005\113\006" +
    "\102\007\112\012\134\015\140\017\120\022\132\023\100" +
    "\025\111\026\116\031\137\032\332\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\005\113\006\102\007\112\012\134\015\140\017" +
    "\120\022\132\023\100\025\111\026\116\031\137\032\337" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	return lexer.next_token();

    }


	public boolean syntaxErrors = false;

	private Lexer lexer;

	public Parser(Lexer lex) {
		super(lex);
	    lexer = lex;
	}

	public void syntax_error(Symbol current_token) {
		report_error( "Syntax error at line " + (current_token.left+1) + ", column " + current_token.right+"\n", null);
		syntaxErrors = true;
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {




  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // start_state ::= functions main functions 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("start_state",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= start_state EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // functions ::= func functions 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // functions ::= declaration functions 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // functions ::= type_creation functions 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // functions ::= alias functions 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // functions ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functions",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // main ::= MAIN LCRBRA func_body RCRBRA SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // main ::= MAIN LPAR RPAR LCRBRA func_body RCRBRA SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // main ::= MAIN LPAR args RPAR LCRBRA func_body RCRBRA SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // func ::= func_base TYPESPEC type SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // func ::= func_base SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // func_base ::= FDEF IDENT LPAR args RPAR LCRBRA func_body RCRBRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_base",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // func_base ::= FDEF IDENT LPAR RPAR LCRBRA func_body RCRBRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_base",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // func_base ::= FDEF IDENT LPAR args RPAR LCRBRA RCRBRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_base",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // func_base ::= FDEF IDENT LPAR RPAR LCRBRA RCRBRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_base",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // func_body ::= declarations statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_body",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // func_body ::= declarations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_body",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // func_body ::= statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func_body",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaration ::= IDENT TYPESPEC type SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaration ::= IDENT TYPESPEC type ASSIGN expressions SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declarations ::= declarations declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declarations ::= declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type_creation ::= TDEF IDENT LCRBRA args RCRBRA SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_creation",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type_creation ::= TDEF IDENT LCRBRA RCRBRA SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_creation",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // alias ::= ALIAS type IDENT SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alias",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statements ::= statement statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statements ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // args ::= IDENT TYPESPEC type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // args ::= args COMMA IDENT TYPESPEC type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type ::= RAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type ::= DICT LT type COMMA type GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type ::= DICT LT TOP COMMA type GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type ::= DICT LT type COMMA TOP GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type ::= DICT LT TOP COMMA TOP GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type ::= SEQ LT type GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // type ::= SEQ LT TOP GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // type ::= IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expressions ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expressions ::= expressions COMMA expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressions",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= null_expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= nested_id ASSIGN expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= PRINT expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= READ nested_id SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= START_IF LPAR expression RPAR THEN statements END_IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement ::= START_IF LPAR expression RPAR THEN statements ELSE statements END_IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement ::= LOOP_START statements LOOP_END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement ::= LOOP_START LOOP_END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statement ::= RETURN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statement ::= RETURN expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // statement ::= ALIAS type type SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // statement ::= break 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // statement ::= type_creation 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // statement ::= error SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // break ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // break ::= BREAK PINT_LIT SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= nested_id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= numeric 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= STRING_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= CHAR_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= BOOL_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= IDENT DOT LEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression ::= expression operator expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= NOT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= LPAR expression RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression ::= LSQBRA expressions RSQBRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression ::= LSQBRA RSQBRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= IDENT IN nested_id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= LCRBRA key_vals RCRBRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= LCRBRA RCRBRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operator ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operator ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operator ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operator ::= MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operator ::= POWER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operator ::= EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operator ::= LEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operator ::= GEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operator ::= LT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operator ::= GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operator ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operator ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operator ::= DOUBLECOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operator ::= IMPLICATION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operator ::= MULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operator ::= NEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // numeric ::= PINT_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // numeric ::= PFLOAT_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // numeric ::= PRAT_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // numeric ::= MINUS PINT_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // numeric ::= MINUS PFLOAT_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // numeric ::= MINUS PRAT_LIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // numeric ::= NULL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // function_call ::= QM expression QM IDENT LPAR expressions RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // function_call ::= QM expression QM IDENT LPAR RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // nested_id ::= IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nested_id",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // nested_id ::= IDENT DOT nested_id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nested_id",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // nested_id ::= IDENT indexs 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nested_id",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // nested_id ::= IDENT indexs DOT nested_id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nested_id",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // null_expression ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("null_expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // null_expression ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("null_expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // index ::= LSQBRA expression RSQBRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // index ::= LSQBRA null_expression TYPESPEC null_expression RSQBRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // indexs ::= index 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("indexs",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // indexs ::= index indexs 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("indexs",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // key_vals ::= expression TYPESPEC expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("key_vals",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // key_vals ::= expression TYPESPEC expression COMMA key_vals 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("key_vals",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
